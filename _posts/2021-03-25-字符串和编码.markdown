---
layout: post
title:  "字符串和编码"
date:   2021-03-25 22:00:00
categories: Python
comments: true
---


> 这里开始又会是比较抽象的内容，如果自由探索到这里并且读下去了，那么恭喜你解锁新成就(●'◡'●)，“hello，world”

## 字符串和编码

​        上一篇我们讲了数据格式，其中字符串类型需要展开来讲讲。

​        我们知道，数字型的数据格式，还有运算符号，就是普通的计算器都能明白代表的意义（就是简单的数学意义）。但是字符串是怎样让计算机明白它的含义呢？比如说“你好”，计算机是怎么处理的？

- 源起

​        首先回到计算机发明的地方美国，由于美国使用的是英文，所以日常使用除了0-9的数字就是26个英文字母及大小写，这样就大大降低了让计算机明白的难度（对比现在），假设我们用000代表A，001代表a，002代表B，003代表b（其实真实的顺序不是这样，这里只是为了方便理解举例），当时的人们发现，只需要不到128个数字，就可以把A-Z，a-z还有一些符号、数字全部用数字表示出来。

​        也就是说，人们可以事先跟计算机约定好，看到000就代表A，看到002就代表B……等等，因为计算机是可以理解数字的，加上约定好的规矩，就能够实现对文字的处理，包括打字输入，在屏幕上显示出来，打印出来等等。这个约定的过程，就是字符的编码，而美国人的这套编码，就是有名的ACSII编码。

- 发展

​        但是世界不只有美国人民要用计算机的嘛，所以中国人、日本人、韩国人等等使用不同语言的人也搞出来自己语言的编码，比如中国很有名的GB2312编码（可以类比游戏出了英文版本还要出中文，日文版本，抱歉我又拿游戏举例了）。这里扩展一下，不同语言的编码，随着语言复杂度的增加，编码的复杂度也增加，比如英文可能只需要1个字节（8个2进制位），到中文可能就需要2个字节（16个2进制位，常用单字太多了），而且还不能和ACSII编码互相冲突。同样的，日文编码、韩文编码，乃至其他语种，也各自有一套不同的编码规则。

- 冲突

​        如果一篇文档里同时使用了多种语言，那怎么办？先不说需要同时知道不同语言的规则，还要避免编码的冲突，因此Unicode编码就被定义出来，可以理解成世界语，其实它是把所有的语言都统一到一套编码里。

​        Unicode的出现解决了编码冲突的问题，但是带来的还有空间浪费的问题，比如要把中文编码和英文编码编到一起，本来英文单独编码，每个字母只需要1个字节，而中文每个汉字需要2个字节，为了统一编码，英文也要在原来的字节前面加0，填充到2个字节的长度，来保证中文英文都是2个字节代表一个字母或汉字。那如果后面又添加了一种需要4个字节代表一个字母的语言，前面的语言也要相应扩展到同样的长度，这在进行数据传输的时候，就会产生无效的冗余（怎么理解呢，就好比你下载一个游戏，系统给你下载了1个G的数据，安装后你发现，整个程序只有0.5G大小，那么多下载的那0.5G的数据，就是无效的冗余，这意味着不下载这部分，也不影响使用，但是又浪费了资源）

​        为了解决这个问题，人们又开发了UTF-8编码，也就是Universal Character Set/Unicode Transformation Format可变长度字符编码，这个规则约定，UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间，而且他还有兼容只支持ASCII编码的历史遗留软件的优点

- 总结

​        在计算机使用过程中，统一使用Unicode编码运算，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。

​        理清字符串和编码问题之后，我们来看一下具体到Python的一个应用，在实际的Python文档中，开头的编码通常会有这两句：

```
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
```

​        第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序（还记得我说的Mac想编程很容易吗，哈哈），Windows系统会忽略这个注释；

​        第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。如果已经申明了使用UTF-8编码，则你的Python代码可以正常显示中文（或者其他语言）

​        最后本来想留作业的，但毕竟这是个隐藏章节，就不留了哈哈哈哈。

